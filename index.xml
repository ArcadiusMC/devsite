<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Arcadius Docs</title><link>/</link><description>Recent content on Arcadius Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Commands</title><link>/menus/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/command/</guid><description>The /delphi command can be used in .mcfunction files inside of data packs and can be used with /execute commands.
Syntax Pattern Description &amp;lt;argument-name&amp;gt; Required argument, replace with appropriate value. [argument-name] Optional argument, replace with appropriate value. argument-name Enter this literally, as shown. /delphi open Arguments /delphi open &amp;lt;players&amp;gt; &amp;lt;page path&amp;gt; Permission delphi.commands Description Opens a page for a player or players.
The &amp;lt;players&amp;gt; argument can either be a player&amp;rsquo;s name or an entity selector like @p @a or @a[distance=.</description></item><item><title>&lt;option/> and &lt;options/> tags</title><link>/menus/header/options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/header/options/</guid><description>Any key/value pair is valid and will be stored in the document, for scripts or the system to use.
Options are declared inside &amp;lt;header&amp;gt; tag with the following syntax:
&amp;lt;option name=&amp;#34;option name&amp;#34; value=&amp;#34;option value&amp;#34; /&amp;gt; You can also omit the value
&amp;lt;option name=&amp;#34;option name&amp;#34;/&amp;gt; When you access an option with an omitted value (with document.getOption(name: string) for example) it will return an empty string. If several values for the same option are set in a page, the last valid one is used.</description></item><item><title>&lt;style/> tag</title><link>/menus/header/style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/header/style/</guid><description>The style tag is used for connecting SCSS stylesheets to the document. This tag can be declared as many times as needed to link multiple stylesheets.
Attributes Attribute Value Description Example src stylesheet file path Specifies the file path of a stylesheet to use in the current document ./style.scss Examples &amp;lt;style src=&amp;#34;./style.css&amp;#34;/&amp;gt;</description></item><item><title>Commands</title><link>/scripts/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scripts/command/</guid><description>Syntax Pattern Description &amp;lt;argument-name&amp;gt; Required argument, replace with appropriate value. [argument-name] Optional argument, replace with appropriate value. argument-name Enter this literally, as shown. /js command Arguments /js &amp;lt;javascript code&amp;gt; Permission hephaestus.commands.js Runs raw javascript code.</description></item><item><title>Modules</title><link>/menus/api/modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/api/modules/</guid><description>Modules are the very basis of the delphi plugin&amp;rsquo;s menu loader and resource system.
To put it shortly, modules are namespaces that can be accessed by the Delphi plugin to load resources such as XML, JSON, SCSS or any kind of text files. Modules can either be directories or .zip files inside the plugins/Delphi/modules directory, or they can be registered by other plugins with the Java API.
If you&amp;rsquo;ve been using the Delphi plugin, you&amp;rsquo;ve almost definitely used modules.</description></item><item><title>mouse-enter</title><link>/menus/events/mouse-enter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/events/mouse-enter/</guid><description>Details Field Value Bubbles true Cancellable false Type MouseEvent Tags All</description></item><item><title>&lt;java-object> tag</title><link>/menus/header/java-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/header/java-object/</guid><description>The &amp;lt;java-object/&amp;gt; element is used to link to a specific java (or Kotlin) class to load and invoke as the document is loaded. This element uses the class-name attribute to find a class.
When a class is found, the system will first try to find a public static void onDomInitialize(Document) method in the class, if found, it is invoked.
If not found, then the system will look for a public constructor with a single Document parameter.</description></item><item><title>mouse-exit</title><link>/menus/events/mouse-exit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/events/mouse-exit/</guid><description>Details Field Value Bubbles true Cancellable false Type MouseEvent Tags All</description></item><item><title>Resource Paths</title><link>/menus/paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/paths/</guid><description>They consist of 3 parts: The module name, The file path and a query. The file path and query are optional elements.
Elements Module names point to specific modules that are either in the plugins/Delphi/modules directory or have been registered by another plugin.
The File path is the path to a file inside of the module. The module name is separated from the file path by a : character.
The Query is a set key-value pairs that specify additional parameters for the module to use.</description></item><item><title>mouse-move</title><link>/menus/events/mouse-move/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/events/mouse-move/</guid><description>This event is not fired if a player&amp;rsquo;s cursor exits or enters an element. In those cases, either the mouse-exit or mouse-enter events are fired instead.
Details Field Value Bubbles false Cancellable false Type MouseEvent Tags All</description></item><item><title>click</title><link>/menus/events/click/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/events/click/</guid><description>Details Field Value Bubbles false Cancellable false Type MouseEvent Tags All</description></item><item><title>Argument Types</title><link>/grenadier/arg-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/grenadier/arg-types/</guid><description>Accessing Argument types
Contains the various built-in argument types Grenadier has.
Most argument types have a vanilla counterpart that the API types are mapped to. Grenadier does also feature several argument types that have no vanilla counterpart and have more general use cases.
General use argument types Argument type Description Example OptionsArgument Parse a list of pre-set options and flags key=value -flag MapArgument Takes a string-object map and parses a map value via its string key a_value EnumArgument Parses an enum constant from it&amp;rsquo;s Enum.</description></item><item><title>Basic Usage</title><link>/nbt/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/nbt/basic/</guid><description>Reading binary data:
InputStream input = // Get an input stream CompoundTag tag = BinaryTags.readCompressed(input); int intValue = tag.getInt(&amp;#34;key&amp;#34;); String string = tag.getString(&amp;#34;other_key&amp;#34;); Writing binary data:
CompoundTag tag = // Get a tag OutputStream stream = // Create a stream BinaryTags.writeCompressed(stream, tag); SNBT parsing:
import net.forthecrown.nbt.string.Snbt; String input = // Get an SNBT input BinaryTag tag = Snbt.parse(input); SNBT writing:
BinaryTag tag = // Get a tag String output = Snbt.</description></item><item><title>Creating Delphi</title><link>/posts/creating-delphi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/posts/creating-delphi/</guid><description/></item><item><title>Tag Paths</title><link>/nbt/paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/nbt/paths/</guid><description>Minecraft wiki: https://minecraft.wiki/w/NBT_path_format
NBT paths can be created and used like so:
import net.forthecrown.nbt.path.TagPath; TagPath path = TagPath.parse(&amp;#34;foo.bar[]&amp;#34;); BinaryTag tag = // Get a tag List&amp;lt;BinaryTag&amp;gt; results = path.get(tag); int removed = path.remove(tag); int changed = path.set(tag, BinaryTags.stringTag(&amp;#34;Hello, world!&amp;#34;)); Paths can also be created programmatically with TagPath.builder(), the above shown example would look like so:
TagPath path = TagPath.builder() .addObjectNode(&amp;#34;foo&amp;#34;) .addObjectNode(&amp;#34;bar&amp;#34;) .addMatchAll() .build();</description></item></channel></rss>