<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Arcadius Docs</title><link>/</link><description>Recent content on Arcadius Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Commands</title><link>/menus/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/command/</guid><description>The /delphi command can be used in .mcfunction files inside of data packs and can be used with /execute commands.
Syntax Pattern Description &amp;lt;argument-name&amp;gt; Required argument, replace with appropriate value. [argument-name] Optional argument, replace with appropriate value. argument-name Enter this literally, as shown. /delphi open Arguments /delphi open &amp;lt;players&amp;gt; &amp;lt;page path&amp;gt; Permission delphi.commands Description Opens a page for a player or players.
The &amp;lt;players&amp;gt; argument can either be a player&amp;rsquo;s name or an entity selector like @p @a or @a[distance=.</description></item><item><title>Colors</title><link>/menus/scss/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/color/</guid><description>Hex values Hex values are prefixed by a # character and specify a color using hex digits. There are 3 types of valid hex sequences:
#rgb (3 character long) This is a shorter equivalent to #rrggbb. #rrggbb (6 characters long) #rrggbbaa (8 characters long) Includes alpha component for transparency. Examples @warn #fff; // =&amp;gt; white @warn #ff0000; // =&amp;gt; red @warn #ff0000c0; // =&amp;gt; #c0ff0000 Color Functions List of Color functions</description></item><item><title>Units</title><link>/menus/scss/units/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/units/</guid><description>Suffix Unit type Description ch length Relative to the size of the &amp;lsquo;0&amp;rsquo; character in minecraft&amp;rsquo;s minecraft:default font px length Relative to 1/40th (see notes below) vw length Relative to 1/100th of the width of the document screen vh length Relative to 1/100th of the height of the document screen m length Relative to the size of 1 block cm length Relative to 1/100th of a block % length Relative to the parent&amp;rsquo;s size deg angle Represents an angle in degrees.</description></item><item><title>&lt;option/> and &lt;options/> tags</title><link>/menus/header/options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/header/options/</guid><description>Any key/value pair is valid and will be stored in the document, for scripts or the system to use.
Options are declared inside &amp;lt;header&amp;gt; tag with the following syntax:
&amp;lt;option name=&amp;#34;option name&amp;#34; value=&amp;#34;option value&amp;#34; /&amp;gt; You can also omit the value
&amp;lt;option name=&amp;#34;option name&amp;#34;/&amp;gt; When you access an option with an omitted value (with document.getOption(name: string) for example) it will return an empty string. If several values for the same option are set in a page, the last valid one is used.</description></item><item><title>&lt;style/> tag</title><link>/menus/header/style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/header/style/</guid><description>The style tag is used for connecting SCSS stylesheets to the document. This tag can be declared as many times as needed to link multiple stylesheets.
Attributes Attribute Value Description Example src stylesheet file path Specifies the file path of a stylesheet to use in the current document ./style.scss Examples &amp;lt;style src=&amp;#34;./style.css&amp;#34;/&amp;gt;</description></item><item><title>Commands</title><link>/scripts/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/scripts/command/</guid><description>Syntax Pattern Description &amp;lt;argument-name&amp;gt; Required argument, replace with appropriate value. [argument-name] Optional argument, replace with appropriate value. argument-name Enter this literally, as shown. /js command Arguments /js &amp;lt;javascript code&amp;gt; Permission hephaestus.commands.js Runs raw javascript code.</description></item><item><title>Modules</title><link>/menus/api/modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/api/modules/</guid><description>Modules are the very basis of the delphi plugin&amp;rsquo;s menu loader and resource system.
To put it shortly, modules are namespaces that can be accessed by the Delphi plugin to load resources such as XML, JSON, SCSS or any kind of text files. Modules can either be directories or .zip files inside the plugins/Delphi/modules directory, or they can be registered by other plugins with the Java API.
If you&amp;rsquo;ve been using the Delphi plugin, you&amp;rsquo;ve almost definitely used modules.</description></item><item><title>mouse-enter</title><link>/menus/events/mouse-enter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/events/mouse-enter/</guid><description>Details Field Value Bubbles true Cancellable false Type MouseEvent Tags All</description></item><item><title>&lt;java-object> tag</title><link>/menus/header/java-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/header/java-object/</guid><description>The &amp;lt;java-object/&amp;gt; element is used to link to a specific java (or Kotlin) class to load and invoke as the document is loaded. This element uses the class-name attribute to find a class.
When a class is found, the system will first try to find a public static void onDomInitialize(Document) method in the class, if found, it is invoked.
If not found, then the system will look for a public constructor with a single Document parameter.</description></item><item><title>mouse-exit</title><link>/menus/events/mouse-exit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/events/mouse-exit/</guid><description>Details Field Value Bubbles true Cancellable false Type MouseEvent Tags All</description></item><item><title>Resource Paths</title><link>/menus/paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/paths/</guid><description>They consist of 3 parts: The module name, The file path and a query. The file path and query are optional elements.
Elements Module names point to specific modules that are either in the plugins/Delphi/modules directory or have been registered by another plugin.
The File path is the path to a file inside of the module. The module name is separated from the file path by a : character.
The Query is a set key-value pairs that specify additional parameters for the module to use.</description></item><item><title>mouse-move</title><link>/menus/events/mouse-move/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/events/mouse-move/</guid><description>This event is not fired if a player&amp;rsquo;s cursor exits or enters an element. In those cases, either the mouse-exit or mouse-enter events are fired instead.
Details Field Value Bubbles false Cancellable false Type MouseEvent Tags All</description></item><item><title>click</title><link>/menus/events/click/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/events/click/</guid><description>Details Field Value Bubbles false Cancellable false Type MouseEvent Tags All</description></item><item><title>&lt;button> element</title><link>/menus/body/button/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/body/button/</guid><description>Attributes Attribute Value Description Example action string Action for the button to perform when clicked action=&amp;quot;cmd: tp %player% 0 100 0&amp;quot; Action attribute Allows changing the button element to perform an action when clicked.
Action Description Example close Closes the menu close cmd: &amp;lt;command&amp;gt; Executes a command as console.
You can use %player% as a placeholder for the player&amp;rsquo;s name cmd: kill %player% player-cmd: &amp;lt;command&amp;gt; Executes a command as the player.</description></item><item><title>&lt;item/> element</title><link>/menus/body/item/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/body/item/</guid><description>Displays an item on the menu. This element cannot have child elements.
Attributes Attribute Value Description Example src path A Resource Path to the item&amp;rsquo;s data. src=&amp;quot;item.json&amp;quot; hide-item-tooltip boolean Whether to show the item&amp;rsquo;s tooltip or
not when the element is hovered over.
false by default hide-item-tooltip=&amp;quot;true&amp;quot; advanced-item-tooltips boolean Whether to show the item tooltip
as if debug tooltips were enabled or not.
false by default advanced-item-tooltips=&amp;quot;true&amp;quot; Source Attribute Specifies a path to a JSON file containing item stack data for displaying the item.</description></item><item><title>Argument Types</title><link>/grenadier/arg-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/grenadier/arg-types/</guid><description>Accessing Argument types
Contains the various built-in argument types Grenadier has.
Most argument types have a vanilla counterpart that the API types are mapped to. Grenadier does also feature several argument types that have no vanilla counterpart and have more general use cases.
General use argument types Argument type Description Example OptionsArgument Parse a list of pre-set options and flags key=value -flag MapArgument Takes a string-object map and parses a map value via its string key a_value EnumArgument Parses an enum constant from it&amp;rsquo;s Enum.</description></item><item><title>background-color</title><link>/menus/scss/properties/background-color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/properties/background-color/</guid><description>Sets the background color of an element.
Field Value Cascades Yes Default value transparent Values Accepts any expression or value that resolves to a color value.
See SCSS / Colors for more info
Examples p { background-color: red; } p { background-color: #f00; } p { background-color: #ff0000; } p { background-color: #ff0000ff; } p { background-color: rgb(255, 0, 0); } p { background-color: hsl(0, 100%, 50%); }</description></item><item><title>Basic Usage</title><link>/nbt/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/nbt/basic/</guid><description>Reading binary data:
InputStream input = // Get an input stream CompoundTag tag = BinaryTags.readCompressed(input); int intValue = tag.getInt(&amp;#34;key&amp;#34;); String string = tag.getString(&amp;#34;other_key&amp;#34;); Writing binary data:
CompoundTag tag = // Get a tag OutputStream stream = // Create a stream BinaryTags.writeCompressed(stream, tag); SNBT parsing:
import net.forthecrown.nbt.string.Snbt; String input = // Get an SNBT input BinaryTag tag = Snbt.parse(input); SNBT writing:
BinaryTag tag = // Get a tag String output = Snbt.</description></item><item><title>clamp(min, value, max)</title><link>/menus/scss/functions/clamp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/functions/clamp/</guid><description>@function clamp($min, $value, $max) Parameters min
Lower (most negative) bound. value
Preferred value. max
Upper (most positive) bound. Returns Either the min, value, or max parameter.
min is returned if value is less than min.
max is returned if value is greater than max.
val is returned if value is greater than min and less than max.
Examples @debug clamp(1 10 100); // =&amp;gt; 10 @debug clamp(1 -2 100); // =&amp;gt; 1 @debug clamp(1 1000 100); // =&amp;gt; 100 @debug clamp(2px 14px 30px); // =&amp;gt; 14px See also min(a, b) max(a, b)</description></item><item><title>color</title><link>/menus/scss/properties/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/properties/color/</guid><description>Sets the color of the text displayed on elements.
Field Value Cascades Yes Initial value black Values Accepts any expression or value that resolves to a color value.
See SCSS / Colors for more info
Examples p { color: red; } p { color: #f00; } p { color: #ff0000; } p { color: #ff0000ff; } p { color: rgb(255, 0, 0); } p { color: hsl(0, 100%, 50%); }</description></item><item><title>cos(x)</title><link>/menus/scss/functions/cos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/functions/cos/</guid><description>@function cos($angle) Parameters angle
An angle, or any number. If the input has no unit, then it&amp;rsquo;s treated as radians. Returns The cosine of the angle angle, between -1 and 1, unless the angle is infinity or -infinity, in which case, NaN is returned.</description></item><item><title>Creating Delphi</title><link>/posts/creating-delphi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/posts/creating-delphi/</guid><description/></item><item><title>hsl(hue, saturation, lightness)</title><link>/menus/scss/functions/hsl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/functions/hsl/</guid><description>@function hsl($hue, $saturation, $lightness, $alpha: 1.0) Parameters hue
Hue color component. Can be defined as plain number (treated the same as degrees) or as a number with an angle measurement (deg, rad, grad, turn). saturation
Saturation color component. Can either be a 0.0 to 1.0 value, or a 0% to 100% value. lightness
Lightness color component. Can either be a 0.0 to 1.0 value, or a 0% to 100% value. alpha (Optional)</description></item><item><title>lighten(color)</title><link>/menus/scss/functions/lighten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/functions/lighten/</guid><description>@function lighten($color, $amount: 25%) Adds the specified amount to each of the specified color&amp;rsquo;s channels. If amount is not specified, it defaults to 25%.
Parameters color
Color input value, must be a valid color. amount (Optional)
Amount to lighten the color. If not specified, defaults to 25%. Return value Modified color
Examples @debug lighten(darkgreen); // =&amp;gt; #007d00 @debug lighten(white); // =&amp;gt; white</description></item><item><title>max(a, b)</title><link>/menus/scss/functions/max/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/functions/max/</guid><description>@function max($a, $b) Parameters a
The first value b
The second value Returns Either the a or b. a is returned if it is greater than b, otherwise b is returned.
Examples See also clamp(min, value, max) min(a, b)</description></item><item><title>min(a, b)</title><link>/menus/scss/functions/min/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/functions/min/</guid><description>@function min($a, $b) Parameters a
The first value b
The second value Returns Either the a or b. a is returned if it is less than b, otherwise b is returned.
See also clamp(min, value, max) max(a, b)</description></item><item><title>Minimessage elements</title><link>/menus/body/minimessage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/body/minimessage/</guid><description>Delphi includes support for a number of tags that aim to replicate the styling of minimessage text.
This means that &amp;lt;yellow&amp;gt;Hello, &amp;lt;bold&amp;gt;world&amp;lt;/bold&amp;gt;!&amp;lt;/yellow&amp;gt; is valid and will render correctly in Delphi menus.
List of supported tags &amp;lt;black&amp;gt; &amp;lt;dark_blue&amp;gt; &amp;lt;dark-blue&amp;gt; &amp;lt;dark_green&amp;gt; &amp;lt;dark-green&amp;gt; &amp;lt;dark_aqua&amp;gt; &amp;lt;dark-aqua&amp;gt; &amp;lt;dark_red&amp;gt; &amp;lt;dark-red&amp;gt; &amp;lt;dark_purple&amp;gt; &amp;lt;dark-purple&amp;gt; &amp;lt;gold&amp;gt; &amp;lt;gray&amp;gt; &amp;lt;grey&amp;gt; &amp;lt;dark_gray&amp;gt; &amp;lt;dark_grey&amp;gt; &amp;lt;dark-gray&amp;gt; &amp;lt;dark-grey&amp;gt; &amp;lt;blue&amp;gt; &amp;lt;green&amp;gt; &amp;lt;aqua&amp;gt; &amp;lt;red&amp;gt; &amp;lt;light_purple&amp;gt; &amp;lt;light-purple&amp;gt; &amp;lt;purple&amp;gt; &amp;lt;yellow&amp;gt; &amp;lt;white&amp;gt; Limits Some tags used by the Minimessage format are not possible to support in XML, such as the &amp;lt;gradient&amp;gt; tag in Minimessage.</description></item><item><title>outline-color</title><link>/menus/scss/properties/outline-color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/properties/outline-color/</guid><description>Sets the outline color of an element.
Field Value Cascades Yes Default value black Values Accepts any expression or value that resolves to a color value.
See SCSS / Colors for more info
Examples p { outline-color: red; } p { outline-color: #f00; } p { outline-color: #ff0000; } p { outline-color: #ff0000ff; } p { outline-color: rgb(255, 0, 0); } p { outline-color: hsl(0, 100%, 50%); }</description></item><item><title>rgb(red, green, blue)</title><link>/menus/scss/functions/rgb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/functions/rgb/</guid><description>@function rgb($red, $green, $blue, $alpha: 1.0) Creates a color value out of the specified red, green and blue components. Any of the RGB components can be specified either as a percentage from 0 to 100 or as a plain number from 0 to 255.
Parameters red
Red color component green
Green color component blue
Blue color component alpha (Optional)
Alpha color component. This parameter is optional, if it&amp;rsquo;s omitted, a value of 1.</description></item><item><title>sin(x)</title><link>/menus/scss/functions/sin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/functions/sin/</guid><description>@function sin($angle) Parameters angle
An angle, or any number. If the input has no unit, then it&amp;rsquo;s treated as radians. Returns The sine of the angle angle, between -1 and 1, unless the angle is infinity or -infinity, in which case, NaN is returned.</description></item><item><title>Tag Paths</title><link>/nbt/paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/nbt/paths/</guid><description>Minecraft wiki: https://minecraft.wiki/w/NBT_path_format
NBT paths can be created and used like so:
import net.forthecrown.nbt.path.TagPath; TagPath path = TagPath.parse(&amp;#34;foo.bar[]&amp;#34;); BinaryTag tag = // Get a tag List&amp;lt;BinaryTag&amp;gt; results = path.get(tag); int removed = path.remove(tag); int changed = path.set(tag, BinaryTags.stringTag(&amp;#34;Hello, world!&amp;#34;)); Paths can also be created programmatically with TagPath.builder(), the above shown example would look like so:
TagPath path = TagPath.builder() .addObjectNode(&amp;#34;foo&amp;#34;) .addObjectNode(&amp;#34;bar&amp;#34;) .addMatchAll() .build();</description></item><item><title>tan(x)</title><link>/menus/scss/functions/tan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/functions/tan/</guid><description>@function tan($angle) Parameters angle
An angle, or any number. If the input has no unit, then it&amp;rsquo;s treated as radians. Returns The tangent of the angle angle.
If the angle is infinity or -infinity, NaN is returned. If the angle is -0, -0 is returned.</description></item><item><title>Text Decoration Elements</title><link>/menus/body/text-deco/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/body/text-deco/</guid><description>Text decoration elements allow for quicker, easier styling of text with elements.
Bold styling: &amp;lt;b&amp;gt; &amp;lt;bold&amp;gt; &amp;lt;strong&amp;gt; Italic styling: &amp;lt;i&amp;gt; &amp;lt;italic&amp;gt; &amp;lt;em&amp;gt; Underlined styling: &amp;lt;u&amp;gt; &amp;lt;underlined&amp;gt; Strikethrough styling: &amp;lt;st&amp;gt; &amp;lt;strikethrough&amp;gt; Obfuscated styling: &amp;lt;obf&amp;gt; &amp;lt;obfuscated&amp;gt;</description></item><item><title>z-index</title><link>/menus/scss/properties/zindex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/scss/properties/zindex/</guid><description>In web CSS the z-index element is only available in a positioned element, but in Delphi this controls the rendering depth of an element regardless of layout context. (See Notes for more info)
Field Value Cascades No Default value 0 Values The Z index property accepts any expression or value that resolves to an integer.
Examples p { z-index: 3; } Notes In Delphi, every element is rendered with display entities which are rotated and positioned along a plane (the document view screen).</description></item></channel></rss>